{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction gitbook上传 1. cd h:\\gitbook_blog 2. cmd上：进入H:\\software\\nvm\\v12.16.3\\node_global\\gitbook build ./ ./docs 3. 在gitbook_blog 目录中打开gitbash 4. git add ./docs 5. git commit -m “message” 6. git push origin gitbook_blog gitbook插件 https://segmentfault.com/a/1190000019806829 git .gitignore 文件不生效 git rm -r --cached . powered by Gitbook该文件最后修改时间： 2021-08-08 22:36:37 "},"项目结构/ccs项目结构.html":{"url":"项目结构/ccs项目结构.html","title":"Ccs项目结构","keywords":"","body":"数据结构设计 项目模块的结构 ccs-business： 项目业务服务代码的实现模块 ccs-cache: Redis 缓存的具体配置功能，在bean.xml中实现了对tm_config和xxx的redis启动刷新 ccs-web：web项目构建模块 ccs-common:这是项目的公共模块，主要用到的有Util包中的JsonUtil和HttpUtil用于别的系统接口调用和对cache取出的config等json包进行映射使用 gradle 配置 项目通过gradle-eclipse 清理项目eclipse配置和 启动eclipse task和eclipseJettyLaunch task eclipse和 eclispseJettyLaucn 都是为了加载eclipse的classpath配置等 同时因为项目的Build LifeStyle因此初始化了gradle 的Project对象,并触发了项目的build.gradle，给Project添加配置,通过setting.gradle的include Task 导入了其他模块的build gradle. 而gradle中设置最多的便是project 的 gradle配置 其中需要添加什么依赖可以到project模块的build.gradle添加依赖 javaProject.gradle 定义了项目以java形式运行时的配置如output的路径 jibx.gradle是一个为Java提供的XML数据绑定框架,但是系统中没看到 webappProject.gradle 是打包时的配置的,如清除webapp生成数据的cleanWebappRuns和服务运行的jetty容器配置等 包的结构 设计一个后台功能大概需要涉及的包(ccs-business): rest(Controller模块,返回给前端的需要用Reslut/RestResult封装返回) manager层,service层,biz层 manager层： 负责将Dao层中的数据库操作组合复用，主要是一些缓存方案，中间件的处理，以及对第三方平台封装的层。 service层： 更加关注业务逻辑，是业务处理层，将manager组合过的操作和业务逻辑组合在一起，再封装成业务操作。 biz层： 包含service层，service层注重基础业务的处理，biz层是复杂应用层的业务层。 repository,dao(若是用到数据库映射框架,都是hibernate) 公司的dao层主要面对本系统内部的,直接面对数据库的 repository是需要通过https获取其他系统的数据,再面向数据库的 domain(dto/request等数据对象,用hibernate的话可以用xml或者在dto对象上用@table注释) 数据库方面:目前只知道dms和tms 的测试数据库地址,ccs和excp都不认识 前端交互流程 1、评审阶段：产品召集前后端进行需求评审，前后端各自捋清楚自己的业务量以及联调之间工作量，从而进行开发时间评估。 2、开发准备阶段：前后端一起商量需求中需要联调的部分，进行接口的口头协议交流。 3、接口定义阶段：前后端中的一方根据之前的口头协议拟定出一份详细的接口，并书写APl文档，完成后由另一方确认。有疑问的地方重新商量直至双方都没有问题。 4、开发阶段：双方根据协商出来的接口为基础进行开发，如在开发过程中发现需要新增或删除一些字段，重复步骤3。 注意：前端在开发过程中记得跟进接口，mock数据进行本地测试。 5、联调阶段：双方独自的工作完成，开始前后端联调，如在联调过程发现有疑问，重复步骤3，直至联调完成。 6、产品体验阶段：将完成的需求交给产品，让其体验，直至产品这边没有问题 7、提测阶段：将完成的需求提给测试人员，让其对该需求进行测试，如发现问题，及时通知开发并让其修改，直至需求没有bug。 8、评审单发布阶段：前后端中的一人进行评审单的拟定，发送给对应的领导，表明需求发布的程序，包括影响到的页面及业务，发布的流程，发布的回滚方案等。 9、发布阶段：前后端双方在保证步骤1—8都没有问题了，进行各自的代码发布，完成后由测试人员在线上进行相应的测试，如果有bug，重复步骤7和9，直至需求成功上线。 可以在我开发前先提供一些需要的参数,先设定各个方法需要的dto的属性,和接口名等信息 也可以在我做完后再一起提供接口名和dto信息,方便前端联调 接口注意事项 接口命名 查询 queryXXX/getXXX 插入 insertXXX/addXXX 更新 updateXXX 删除 deleteXXX 判断 checkXXX(数据库用is_xxx,但需要表明映射) 统计 staticXXX 代码质量 接口是没有静态代码块的statci{}，也没有构造方法，一个类的父类只能有一个，但是一个类可以同时实现多个接口 格式：public class Myinterfaceimpl implements MyinterfaceA,MyInterfaceB{覆盖重写所有的抽象方法} 如果多个接口含有相同的抽象方法，则直接重写一回即可 如果没有覆盖重写全部的，必须是抽象类 接口中有相同的默认方法必须要重写，抽象类中也要重写 一个类如果直接父类的方法与接口的默认方法冲突，优先使用父类的方法*/ 注释文档 个人的困惑 编程的时候,刚开始初步浪费时间的较多的地方,便是在数据库和dto,方法等的命名上,对于各自的系统,应该各自对高频关键字应该有一份推荐的模板,有益于提高开发效率,也减少以后阅读维修的难度 对于各个中间件,如redis和kafka,最好注释或者文档能清晰的标识其配置逻辑、已经使用的有哪些与能哪些类型的功能需要被使用的情况，不然刚上手如我现在需要问人是否要先从cache中获取，以及是否有获取不到的情况放到数据库中还是刷新缓存等处理 对于需求，对于一些需求有什么特殊的配置需求（存储、中间件使用等），可以共同编辑到需求文档中，如现在的添加配置用tm_config这张表而不是新建表。 对于前端后台交互，针对一些直接交互的控件：哪个功能是后台逻辑实现哪个是前端实现可以先前期交流并加入到需求文档中 对于数据库、表的功能还有各个的测试环境地址，小组有专门的文档，可以加快项目的理解速度，而不需要找到各个功能的dao层去查看 powered by Gitbook该文件最后修改时间： 2021-08-08 22:35:20 "}}